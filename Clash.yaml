# mihomo 配置
# 日期：2025-05-04 22:44:38
# 配置作者：https://t.me/iKeLee
# 适用版本：所有使用 mihomo 核心的程序
port: 7890
socks-port: 7891
mixed-port: 7892
redir-port: 7893
tproxy-port: 7894

unified-delay: true
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true
mode: rule
log-level: info
ipv6: true
udp: true

external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'

geox-url:
  # geoip: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat'
  # geosite: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat'
  mmdb: 'https://geodata.kelee.one/Country-Masaiki.mmdb'
  asn: 'https://geodata.kelee.one/GeoLite2-ASN-P3TERX.mmdb'

profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

# P2P下载端口
listeners:
- name: socks5-in-1
  type: socks
  port: 10808
  listen: 0.0.0.0
  udp: true
  users: []
  proxy: DIRECT

dns:
  enable: true
  prefer-h3: true
  listen: 0.0.0.0:1053
  ipv6: false
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  nameserver:
    - https://223.5.5.5/dns-query
    - https://223.6.6.6/dns-query

# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 3600, health-check: {enable: true, url: 'http://www.google.com/blank.html', interval: 6}}

# 锚点 - 节点订阅
proxy-providers: 
  Ladder:
    url: 'https://baidu.com'
    <<: *NodeParam
    path: './proxy_providers/Ladder.yaml'

# 锚点 - 节点筛选组
FilterHome: &FilterHome '^(?=.*(Home))^(?!.*(网站|地址|剩余|过期|时间|有效|网址|禁止|邮箱|发布|客服|订阅|节点|流量)).*$'
FilterHK: &FilterHK '^(?=.*(香港|HK|Hong|🇭🇰))^(?!.*(网站|地址|剩余|过期|时间|有效|网址|禁止|邮箱|发布|客服|订阅|节点|流量)).*$'
FilterTW: &FilterTW '^(?=.*(台湾|TW|Taiwan|🇹🇼|🇨🇳))^(?!.*(网站|地址|剩余|过期|时间|有效|网址|禁止|邮箱|发布|客服|订阅|节点|流量)).*$'
FilterJP: &FilterJP '^(?=.*(日本|JP|Japan|🇯🇵))^(?!.*(网站|地址|剩余|过期|时间|有效|网址|禁止|邮箱|发布|客服|订阅|节点|流量)).*$'
FilterKR: &FilterKR '^(?=.*(韩国|韓|KR|Korea|🇰🇷))^(?!.*(网站|地址|剩余|过期|时间|有效|网址|禁止|邮箱|发布|客服|订阅|节点|流量)).*$'
FilterSG: &FilterSG '^(?=.*(新加坡|狮城|SG|Singapore|🇸🇬))^(?!.*(网站|地址|剩余|过期|时间|有效|网址|禁止|邮箱|发布|客服|订阅|节点|流量)).*$'
FilterUS: &FilterUS '^(?=.*(美国|US|United States|America|🇺🇸))^(?!.*(网站|地址|剩余|过期|时间|有效|网址|禁止|邮箱|发布|客服|订阅|节点|流量)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b|(\d{4}-\d{2}-\d{2}|\d+G)))).*$'

# 参数锚点
# 锚点 - 时延优选参数 [每 50 秒一次惰性健康检查，容差 300ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest: &UrlTest {type: url-test, interval: 50, tolerance: 300, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all: true}
# 锚点 - 故障转移参数 [每 50 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack: &FallBack {type: fallback, interval: 50, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all: true}
# 锚点 - 负载均衡参数 [每 50 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance: &LoadBalance {type: load-balance, interval: 50, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: true, include-all: true}
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleProviders: &RuleProviders {type: http, behavior: classical, interval: 3600, format: yaml, proxy: 节点选择}

# 策略组
proxy-groups: 
  - {name: 自动选择, type: url-test, include-all: true, filter: *FilterAll, icon:  https://raw.githubusercontent.com/Orz-3/mini/master/Color/Auto.png}
  - {name: 节点选择, type: select, proxies: [自动选择, 香港时延优选, 新国时延优选], icon:  https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Bypass.png}
  - {name: ChatGPT, type: select, proxies: [新国时延优选,美国时延优选,节点选择], icon:  https://raw.githubusercontent.com/lige47/QuanX-icon-rule/main/icon/ChatGPT-green.png}
  - {name: Telegram, type: select, proxies: [节点选择, 新国时延优选, 美国时延优选], icon:  https://raw.githubusercontent.com/Orz-3/mini/master/Color/Telegram.png}
  - {name: Microsoft, type: select, proxies: [DIRECT, 节点选择], icon:  https://raw.githubusercontent.com/Orz-3/mini/master/Color/Microsoft.png}
  - {name: 回家之路, type: url-test, include-all: true, filter: *FilterHome, icon:  https://raw.githubusercontent.com/Orz-3/mini/master/Color/China.png}
  - {name: 漏网之鱼, type: select, proxies: [节点选择, DIRECT], icon:  https://raw.githubusercontent.com/Orz-3/mini/master/Color/Final.png}

# 时延优选
  - {name: 香港时延优选, <<: *UrlTest, filter: *FilterHK}
  - {name: 台湾时延优选, <<: *UrlTest, filter: *FilterTW}
  - {name: 日本时延优选, <<: *UrlTest, filter: *FilterJP}
  - {name: 韩国时延优选, <<: *UrlTest, filter: *FilterKR}
  - {name: 新国时延优选, <<: *UrlTest, filter: *FilterSG}
  - {name: 美国时延优选, <<: *UrlTest, filter: *FilterUS}

# 故障转移
  - {name: 香港故障转移, <<: *FallBack, filter: *FilterHK}
  - {name: 台湾故障转移, <<: *FallBack, filter: *FilterTW}
  - {name: 日本故障转移, <<: *FallBack, filter: *FilterJP}
  - {name: 韩国故障转移, <<: *FallBack, filter: *FilterKR}
  - {name: 新国故障转移, <<: *FallBack, filter: *FilterSG}
  - {name: 美国故障转移, <<: *FallBack, filter: *FilterUS}

# 负载均衡
  - {name: 香港负载均衡, <<: *LoadBalance, filter: *FilterHK}
  - {name: 台湾负载均衡, <<: *LoadBalance, filter: *FilterTW}
  - {name: 日本负载均衡, <<: *LoadBalance, filter: *FilterJP}
  - {name: 韩国负载均衡, <<: *LoadBalance, filter: *FilterKR}
  - {name: 新国负载均衡, <<: *LoadBalance, filter: *FilterSG}
  - {name: 美国负载均衡, <<: *LoadBalance, filter: *FilterUS}

# 订阅规则
rule-providers:
  Lan:
    <<: *RuleProviders
    path: './rules/Lan.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml'

  Direct:
    <<: *RuleProviders
    path: './rules/Direct.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Direct.yaml'

  Personal:
    <<: *RuleProviders
    path: './rules/Personal.yaml'
    url: 'https://raw.githubusercontent.com/yishangfei/run/main/Clash/Personal.yaml'

  AI:
    <<: *RuleProviders
    path: './rules/AI.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/AI.yaml'

  Microsoft:
    <<: *RuleProviders
    path: './rules/Microsoft.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml'

  Google:
    <<: *RuleProviders
    path: './rules/Google.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml'

  Telegram:
    <<: *RuleProviders
    path: './rules/Telegram.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml'

  Twitter:
    <<: *RuleProviders
    path: './rules/Twitter.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.yaml'

  YouTube:
    <<: *RuleProviders
    path: './rules/YouTube.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml'

  GitHub:
    <<: *RuleProviders
    path: './rules/GitHub.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitHub/GitHub.yaml'

  Apkpure:
    <<: *RuleProviders
    path: './rules/Apkpure.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apkpure/Apkpure.yaml'

  Developer:
    <<: *RuleProviders
    path: './rules/Developer.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Developer/Developer.yaml'

  Global:
    <<: *RuleProviders
    path: './rules/Global.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global.yaml'

  GlobalMedia:
    <<: *RuleProviders
    path: './rules/GlobalMedia.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia.yaml'

  Wikipedia:
    <<: *RuleProviders
    path: './rules/Wikipedia.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Wikipedia/Wikipedia.yaml'

  Proxy:
    <<: *RuleProviders
    path: './rules/Proxy.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy.yaml'

  ChinaDownloadCDN:
    <<: *RuleProviders
    path: './rules/ChinaDownloadCDN.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/ChinaDownloadCDN.yaml'
    
  WeChat:
    <<: *RuleProviders
    path: './rules/WeChat.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/WeChat/WeChat.yaml'

  ChinaMax:
    <<: *RuleProviders
    path: './rules/ChinaMax.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax.yaml'

  ChinaMax_IP:
    <<: *RuleProviders
    path: './rules/ChinaMax_IP.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_IP.yaml'

  ChinaMedia:
    <<: *RuleProviders
    path: './rules/ChinaMedia.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMedia/ChinaMedia.yaml'
    
  iCloudChina:
    <<: *RuleProviders
    path: './rules/iCloudChina.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/iCloudChina.yaml'

  ESET_China:
    <<: *RuleProviders
    path: './rules/ESET_China.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/ESET_China.yaml'

  Privacy:
    <<: *RuleProviders
    path: './rules/Privacy.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Privacy/Privacy.yaml'

# 规则指向
rules:
  - IP-CIDR,192.168.31.0/24,回家之路,no-resolve
  - RULE-SET, Lan, DIRECT
  - RULE-SET, Direct, DIRECT
  - RULE-SET, AI, ChatGPT
  - RULE-SET, Microsoft, Microsoft
  - RULE-SET, Telegram, Telegram
  - RULE-SET, Personal, 节点选择
  - RULE-SET, Twitter, 节点选择
  - RULE-SET, GitHub, 节点选择
  - RULE-SET, Apkpure, 节点选择
  - RULE-SET, Developer, 节点选择
  - RULE-SET, Global, 节点选择
  - RULE-SET, GlobalMedia, 节点选择
  - RULE-SET, Wikipedia, 节点选择
  - RULE-SET, Proxy, 节点选择
  - RULE-SET, Google, 节点选择
  - RULE-SET, WeChat, DIRECT
  - RULE-SET, ChinaMax, DIRECT
  - RULE-SET, ChinaMax_IP, DIRECT
  - RULE-SET, ChinaMedia, DIRECT
  - RULE-SET, ChinaDownloadCDN, DIRECT
  - RULE-SET, iCloudChina, DIRECT
  - RULE-SET, ESET_China, DIRECT
  - RULE-SET, Privacy, REJECT
  - GEOIP, CN, DIRECT
  - MATCH, 漏网之鱼
